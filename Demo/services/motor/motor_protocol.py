from typing import Protocol, Optional

from dto.motor_dto import MotorDto
from services.motor.tasks.run_task_protocol import SingleMotorTaskProtocol
from servomotor.controller_status import EMotorStatus


class MotorServiceProtocol(Protocol):
    def is_calibration_enabled(self) -> bool:...

    def set_calibration(self, value: bool) -> bool:...

    def get_all(self) -> list[MotorDto]:...

    def get_motor(self, motor_id: int) -> Optional[MotorDto]:...

    def update_motor(self, motor_dto: MotorDto) -> MotorDto: ...

    def set_origin_all(self):...

    def set_origin(self, motor_id: int):...

    def set_limit_all(self):...

    def set_limit(self, motor_id: int):...

    def get_motor_status(self, motor_id: int) -> EMotorStatus:...

    def move_to_home(self, motor_id: int):...

    def move_to_origin(self, motor_id: int):...

    def move_steps(self, motor_id: int, steps: int = 1, forward: bool = True): ...

    def run_gcode(self, gcode: str):...

    def run(self, task: SingleMotorTaskProtocol):...

    def stop_motor(self, motor_id: Optional[int] = None) -> bool:...

